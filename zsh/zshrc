# zshrc by @windvalley
# https://raw.githubusercontent.com/windvalley/dotfiles/master/zsh/zshrc


# vim: set foldmarker={{,}} foldlevel=0 foldmethod=marker:
#
# NOTE:
#   查看折叠内容的方法:
#      za: normal 模式下按 za, 表示当光标在关闭折叠上时打开之, 在打开折叠上时关闭之;
#          在打开的折叠内部任意处按 za, 也会关闭折叠.
#      zA: 是 za 的递归操作, 是针对嵌套折叠的场景.


# --- 安装步骤 {{

#   1. 安装 ohmyzsh
#      doc: https://github.com/ohmyzsh/ohmyzsh
#      sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#      官方主题所在目录: ~/.oh-my-zsh/themes
#      官方插件所在目录: ~/.oh-my-zsh/plugins
#      第三方主题所在目录: ~/.oh-my-zsh/custom/themes
#      第三方插件所在目录: ~/.oh-my-zsh/custom/plugins
#
#   2. 常用第三方插件安装
#      doc: https://github.com/unixorn/awesome-zsh-plugins
#      1) 自动补全插件:
#         git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
#      2) 语法高亮插件:
#         git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
#
#   3. 使用本 zshrc 文件
#      wget -O ~/.zshrc https://raw.githubusercontent.com/windvalley/dotfiles/master/zsh/zshrc

# }}


# --- 基础配置 {{

# oh-my-zsh 安装路径.
export ZSH="$HOME/.oh-my-zsh"

# 为 zsh 定制的内容的放置目录.
export ZSH_CUSTOM="$ZSH/custom"

# 推荐的主题列表: ys, robbyrussell, amuse, agnoster, random
# doc: https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="ys"

# 标准插件存放在: $ZSH/plugins/
# 定制插件存放在: $ZSH_CUSTOM/plugins/
# NOTE:
# 光标移到下面的 README.md 文件, 按 gf 可以打开帮助文件, 按 ctrl o 返回到当前文件.
# vi-mode:  ~/.oh-my-zsh/plugins/vi-mode/README.md
# tmux:  ~/.oh-my-zsh/plugins/tmux/README.md
# git:  ~/.oh-my-zsh/plugins/git/README.md
# history: ~/.oh-my-zsh/plugins/history/README.md
# brew:  ~/.oh-my-zsh/plugins/brew/README.md
# extract:  ~/.oh-my-zsh/plugins/extract/README.md
# web-search: ~/.oh-my-zsh/plugins/web-search/README.md
# emoji: ~/.oh-my-zsh/plugins/emoji/README.md
plugins=(
    vi-mode
    tmux
    git
    z
    history
    brew
    extract
    web-search
    emoji
    zsh-autosuggestions
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# 设置系统默认语言, 避免终端出现中文乱码.
export LANG=en_US.UTF-8

# 专门用来解决 ranger.vim 乱码的问题.
export LC_ALL=en_US.UTF-8

# 默认的编辑器, git、crontab 等会默认使用.
export EDITOR=nvim

# 私有配置单独存放的文件.
source $HOME/.zshrc.private

# }}


# --- 代理配置 {{

# 为终端设置使用 ShadowsocksX 提供的 HTTP 代理的快捷命令.
# NOTE:
#   1. 需要先启动 ShadowsocksX 软件, 配置好代理服务器, 选择'自动模式'和'启用HTTP代理'即可;
#   2. 每个终端标签页想使用代理, 都需要先执行 proxy, 然后 curl google.com 进行测试;
#   3. 关闭当前标签页的代理, 使用 unproxy 命令.
#   4. 经过实测, 无法正常使用 socks5 代理, 比如: export ALL_PROXY=socks5://127.0.0.1:10808
alias proxy="export ALL_PROXY=http://127.0.0.1:10818;
gsed -i '/^Host github.com/{s/^/#/;n;s/^/#/}' ~/.ssh/config"
alias unproxy="unset ALL_PROXY;
gsed -i '/^#Host github.com/{s/^#//;n;s/^#//}' ~/.ssh/config"

# brew 资源镜像配置, 使用代理的时候不使用此资源镜像.
[[ -z "$ALL_PROXY" ]] &&
    export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles

# }}


# --- 编程语言 {{

# ****** Go ******
# 安装 Go:
#   brew install go
# 更新 Go:
#   brew upgrade go
# 安装 protobuf 的编译器 protoc:
#   brew install protobuf
# 安装 protoc 需要的 Go 语言代码转换工具 protoc-gen-go:
#   brew install protoc-gen-go

GOPATH=$HOME/go

GOBIN=$GOPATH/bin

# 可选值:
#     on  开启 Go Modules 特性, 使 Go 编译器忽略 $GOPATH 和 vender 文件夹, 只根据 go.mod 下载依赖;
#    off  关闭 Go Modules 特性, 使 Go 编译器依旧在 $GOPATH 和 vender 文件夹来查找依赖;
#   auto  当源码在 $GOPATH/src 目录下, 并且项目目录下没有 go.mod 文件时,
#         关闭 Go Modules 特性, 其他情况下均开启.
# NOTE: Go 1.14+ 版本后 auto 为默认值.
GO111MODULE=auto

# 下载 Go 包的代理服务器, direct 的作用是当代理服务器上没有要下载的包, 则直接从原始地址下载.
GOPROXY=https://goproxy.cn,direct

# 下载 Go 包时, 如果包地址是这里配置的地址, 则不走设置的代理服务器, 直接从这里配置的地址下载;
# 一般这里配置公司内部配置的私有 Go 包仓库;
# Go 1.13+ 开始支持.
GOPRIVATE=

# 默认值: sum.golang.org, 是一个 Web 服务器, 用来查询依赖包指定版本的哈希值,
# 确保拉取到的 Go 包未经过篡改, 如果不需要校验, 则设置为 off.
GOSUMDB=sum.golang.org

PATH="$GOBIN:$PATH"

export GOPATH GOBIN GOPROXY GOPRIVATE GOSUMDB PATH

# ****** Python3 ******
# brew install python3
# brew install poetry

# python
export PATH="/usr/local/opt/python3/bin:$PATH"
# poetry
export PATH="$HOME/.poetry/bin:$PATH"

# ****** Lua ******
# brew install lua@5.3

# lua 指定使用 5.3 版本.
ln -sf /usr/local/Cellar/lua@5.3/5.3.6/bin/lua /usr/local/bin/lua &>/dev/null

# luarocks 指定使用 lua 的 5.3 版本.
alias luarocks="luarocks  --lua-dir=/usr/local/opt/lua@5.3"

export PATH=$HOME/.luarocks/bin:$PATH

# ****** node ******
# brew install node@14

export PATH="/usr/local/opt/node@14/bin:$PATH"

# ****** ruby ******
# brew install ruby

export PATH="/usr/local/opt/ruby/bin:$PATH"

# ****** java ******
# brew install java

export PATH="/usr/local/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I/usr/local/opt/openjdk/include"

# }}


# --- Vim/Neovim & Alacritty 主题相关命令配置 {{
alias gsed="sed"

alias colorscheme="~/.dotfiles/scripts/colorscheme.zsh"
alias font="~/.dotfiles/scripts/font.zsh"
alias opacity="~/.dotfiles/scripts/opacity.zsh"
alias font-size="~/.dotfiles/scripts/font_size.zsh"
alias vim-bgtransparency="~/.dotfiles/scripts/vim_bgtransparency.zsh"
alias colors-print="~/.dotfiles/scripts/colors_print.sh"
alias hexcolors-print="~/.dotfiles/scripts/print_256_hex_colors.py"
alias volume="~/.dotfiles/scripts/audio_volume.zsh"

alias cs=colorscheme
alias f=font
alias o=opacity
alias fs=font-size
alias v=vim-bgtransparency
alias c=colors-print
alias hex=hexcolors-print
alias vol=volume

# }}


# --- 其他配置 {{

alias vi="nvim"

# 拷贝和移动文件的时候, 如果目标文件存在则进行交互式确认.
alias cp='cp -i'
alias mv='mv -i'

# 列出正在监听的tcp连接.
alias lsof_tcp="lsof -aP -i TCP -s TCP:LISTEN"

# 用于 git commit 的签名.
export GPG_TTY=$(tty)

# fzf(https://github.com/junegunn/fzf)
export FZF_DEFAULT_OPTS='--height 60% --layout=reverse --border'
alias ff="vim \$(fzf)"

# }}


# --- 使用技巧 {{

#                 ctrl f  输入任意命令行的一部分时, 如果自动出现补全提示,
#                         使用此快捷键自动采纳提示的补全信息.
#                         NOTE: 如果使用了 vi-mode 插件, 此快捷键将失效, 请使用 ctrl e 替代.
#                    tab  命令行输入一部分后按 tab 键触发补全提示或在提示项中选择.
#                 ctrl g  取消选择 tab 选择的补全提示项, 回到命令行本身.
#                      z  z 后输入你要切换的目标目录的一部分, 回车即可自动跳转到目标目录.
#
# *** vi-mode 插件 (~/.oh-my-zsh/plugins/web-search/README.md)
#                 ctrl e  编辑模式下将光标移动到行尾, 如果命令行有提示的补全, 则会有补全效果,
#                         替代不使用 vi-mode 插件时的 ctrl f 快捷键.
#                    ESC  使命令行进入 vim 的 normal 模式, 光标移动/文本对象编辑与 vim 一致.
#                     vv  将命令行文本放到 vim 中进行编辑.
#                    j/k  向下或向上翻阅历史命令行.
#                      /  输入关键字搜索历史命令行.
#                      n  翻阅通过 / 搜索的历史命令行.
#
# *** web-search 插件 (~/.oh-my-zsh/plugins/web-search/README.md)
#             google key  打开浏览器使用 google 搜索 key.
#               bing key  打开浏览器使用 bing 搜索 key.
#              baidu key  打开浏览器使用 baidu 搜索 key.
#      stackoverflow key  打开浏览器使用 stackoverflow 搜索 key.
#
# *** git 插件 (~/.oh-my-zsh/plugins/git/README.md)
#                    gst  git status
#                    gsh  git show
#                     ga  git add
#                     gc  git commit -v
#                     gp  git push
#                    gpf  git push -f
#                    glo  git log --oneline --decorate
#                   glog  git log --oneline --decorate --graph
#                     gl  git pull
#
# *** 自定义命令
#                  theme  列出 vim 和 alacritty 主题颜色和使用方法.
#          theme gruvbox  将 vim 和 alacritty 的主题颜色切换为 gruvbox.
#            opacity 0.8  将 alacritty 终端的背景透明度设置为80%, 数字越小, 透明度越大.
#          font FiraCode  将 alacritty 终端的字体切换为 FiraCode.
#           font-size 12  将 alacritty 终端的字体大小设置为 12.
# vim-bgtransparency 1/0  打开或关闭 Vim 背景透明色.
#             t/o/f/fs/v  theme, opacity, font, font-size, vim-bgtransparent 的 alias 命令.
#                     ff  通过 fzf 搜索文件并用 vim 打开.
#               lsof_tcp  查看当前监听的端口信息.

# }}
